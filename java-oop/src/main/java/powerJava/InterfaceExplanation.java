//인터페이스 설명

package powerJava;

public class InterfaceExplanation {

}

/*
 * 인터페이스란?
 * 
 * 인터페이스란 추상클래스의 극단적인 경우이다. 인터페이스는 추상 메소드들로만 이루어진다.
 * 이들 추상 메소드는 특정 인터페이스를 따르는 클래스들을 위한 요구 조건(Requirements)의
 * 역할을 한다. 흔히 서비스를 제공하는 클래스는 서비스를 받는 클래스가 특정 인터페이스를 따르는 경우에만
 * 서비스를 제공할 수 있다.
 * 
 * 현실세계의 예로, 고속도로 톨게이트에서 하이패스 서비스를 받으려면 하이패스 규격을 따르는 단말기를
 * 가지고 있어야 한다. 자바에서도 마찬가지이다. 예를 들어, 객체가 정렬되려면 객체를 다른 객체와
 * 비교할 수 있는 인터페이스를 가지고 있어야 한다.
 * 
 * 자바에서의 인터페이스는 객체와 객체 사이의 상호 작용이 이루어지는 인터페이스를 의미한다.
 * 인터페이스를 정의하는 것은 클래스를 정의하는 것과 유사하다. 인터페이스는
 * 
 * - 추상 메소드
 * - 상수
 * 
 * 로 이루어진다. 인터페이스 안의 모든 메소드는 추상메소드로 간주되기 때문에, 
 * abstract 예약어를 반드시 사용할 필요는 없다.
 * 인터페이스 안에서 필드는 선언될 수 "없다".
 * 
 * e.g.
 * 
 * public interface 인터페이스_이름 {
 * 	반환형 추상메소드1(...);
 * 	반환형 추상메소드2(...);
 * }
 * 
 * 
 * 추상클래스처럼 인터페이스도 인스턴스를 생성할 수 없다. 다만 다른 클래스에 의하여
 * 구현(implementaion)될 수는 있다. 이것은 인터페이스에 정의된 추상메소드의 
 * 몸체{}를 정의한다는 의미이다.
 * 
 * e.g.
 * 
 * public class 클래스_이름 implements 인터페이스_이름 {
 * 	반환형 추상메소드1(...){
 * 		...
 * 	}
 * 	
 * 	반황형 추상메소드2(...){
 * 		...
 * 	}
 * }
 * 
 * 
 *	인터페이스의 필요성과 예
 *
 * 홈네트워크 시스템을 생각하여 보자. 홈네트워크 시스템은 가정에서 쓰이는 모든 가전 제품들이
 * 유무선 하나의 시스템으로 연결, 쌍방향 통신이 가능한 시스템을 말한다. 가전 제품과 홈네트워크
 * 서버 사이에는 가전 제품을 제어할 수 있는 일종의 표준 규격이 필요하다. 자바로 작성한다면
 * 이 표준 규격은 바로 인터페이스로 구현된다.
 * 
 * 가전제조사들은 가전 제품을 원격 제어할 수 있도록 제품을 제어할 수 있는 소프트웨어를 내장하여 제공한다.
 * 반면 홈네트워크 서버에서는 모든 가전 제품을 제어할 수 있는 통일된 방법이 필요하다.
 * 따라서 둘 사이에는 어떤 약속이 필요하게 되고 구체적으로 원격으로 제어하는 데 필요한
 * 메소드들에 대하여 합의하여야 한다. 가전제품 안에서 메소드가 어떻게 구현되는가는
 * 전혀 필요가 없다. 외부에서 메소드를 호출하여 사용할 수 있으면 그것으로 충분하다.
 * 이것이 인터페이스의 개념이다.
 * 
 * 일단 인터페이스가 디자인되면, 클래스 간의 통합에 대하여 걱정할 필요 없이 각 클래스들은 별도의
 * 팀에 의해 병렬적으로 작성될 수 있다.
 * 
 * e.g.
 * public interface RemoteControl {
 * 	public void turnOn();
 * 	public void turnOff();
 * }
 * 
 * 여기서 메소드들은 모두 시그니처만 존재하고, 몸체가 없으며 세미콜론으로 종료된다는 점에 유의해야 한다.
 * 인터페이스는 안에서 선언되는 메소드들은 모두 묵시적으로 public abstract이다. 따라서 public이나
 * abstract 수식어는 없어도 된다.
 * 
 * 클래스가 인터페이스를 구현하기 위해서는 implements 키워드를 사용한다.
 * 
 * e.g.
 * 
 * public class Television implements RemoteControl{
 * 	public void turnOn(){
 * 		...
 * 	}
 * 	public void turnOff(){
 * 		...
 * 	}
 * }
 * 
 * 
 * TV 생산 업체마다 인터페이스를 다르게 구현할 것이다. 하지만 여전히 동일한 제어 인터페이스인
 * RemoteControl 인터페이스를 지원한다. 따라서 홈네트워크 서버에서는 이들 인터페이스들을
 * 호출하여 가전제품을 원격 조정할 수 있다.
 * 
 * 
 * Television t = new Television();
 * t.turnOn();
 * t.turnOff()
 * 
 * 냉장고도 마찬가지이다.
 * 
 * Refrigerator r = new Refrigerator();
 * r.turnOn();
 * r.turnOff();
 * 
 * @@인터페이스를 어떤 클래스가 사용하기 위해서는 인터페이스에 포함된 모든 추상 메소드를 구현하여야 한다.
 * 클래스가 인터페이스에 있는 하나의 메소드라도 빠뜨린다면 컴파일러는 그 클래스가 추상클래스로
 * 정의되어야 한다고 지적할 것이다. 추상클래스와 마찬가지로 인터페이스는 인터페이스와 같은 이름을 가진
 * 확장자가 .java인 파일에 단독으로 저장된다.
 * 
 * 
 * 		인터페이스와 타입
 * 
 * 인터페이스는 하나의 타입(type)으로 보아야 한다. 이 타입은 인터페이스를 구현한 클래스들을 하나로 묶는
 * 역할을 한다. 인터페이스의 이름은 클래스의 이름과 마찬가지로 참조변수를 정의하는 데 사용될 수 있다.
 * 만약 인터페이스 타입의 참조 변수를 정의하였다면 이 변수에 대입할 수 있는 값은 반드시 그 인터페이스를
 * 구현한 클래스의 객체이어야 한다.
 * 
 * RemoteControl obj = new Television();
 * obj.turnOn();
 * obj.turnOff();
 * 
 * 
 * - Television 객체이지만 RemoteControl 인터페이스를 구현하기 때문에 RemoteControl타입의
 * 변수를 가리킬 수 있다. (Television 객체를 생성하였지만 Television 참조변수로 가리키지 않고
 *  RemoteControl 참조변수로 가리키고 있다.)
 * 
 * - obj.를 통해서는 RemoteControl인터페이에 정의된 메소드만을 호출할 수 있다. 
 * (인터페이스 참조 변수를 통해서는 그 인터페이스 안에 정의된 메소드만을 호출할 수 있다.
 * 다른 메소드나 필드에는 접근할 수 없다.
 */